import util_dataset
import numpy as np
import collections
import json_lines
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn import model_selection, svm
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.externals import joblib
import csv

def compute_model_opt(x_train,y_train):
    SVC_model_opt = svm.LinearSVC()
    SVC_model_opt.fit(x_train, y_train)
    filename = 'SVC_opt_model.sav'
    joblib.dump(SVC_model_opt, filename)
    print("LinearSVC (opt) model saved\n")


def compute_model_comp(x_train,y_train):
    SVC_model_comp = svm.LinearSVC()
    SVC_model_comp.fit(x_train, y_train)
    filename = 'SVC_comp_model.sav'
    joblib.dump(SVC_model_comp, filename)
    print("LinearSVC (comp) model saved\n")


def call_opt_model(filename, x_test):
    loaded_model = joblib.load(filename)
    y_pred_opt = loaded_model.predict(x_test)
    return y_pred_opt

def call_comp_model(filename, x_test):
    loaded_model = joblib.load(filename)
    y_pred_comp = loaded_model.predict(x_test)
    return y_pred_comp


def blind_test():
    x, opt, comp = util_dataset.read_all_file()
    blind_x = util_dataset.read_blind_file()
    corpus = x + blind_x

    vectorizer = TfidfVectorizer(ngram_range=(2,3))

    X_all = vectorizer.fit_transform(corpus)

    train_set = X_all[:30000]
    blind_set = X_all[-3000:]
    
    opt_results = compute_model_opt(train_set, opt)
    comp_results = compute_model_comp(train_set, comp)

    opt_results = call_opt_model("SVC_opt_model.sav", blind_set)
    comp_results = call_comp_model("SVC_comp_model.sav", blind_set)

    with open('result.csv', 'w') as csv_file:
        for i in range(3000):
            line = comp_results[i]+","+opt_results[i]+"\n"
            csv_file.write(line)


if __name__ == '__main__':
    blind_test()
