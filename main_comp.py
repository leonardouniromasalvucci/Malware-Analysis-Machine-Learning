import json_lines, time, util_dataset
import numpy as np
import pandas as pd
import nltk
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import model_selection, svm
from sklearn.naive_bayes import *
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from nltk import ngrams

X, Y2 = util_dataset.read_file_comp()

vectorizer = TfidfVectorizer(ngram_range=(2,3))
X_all = vectorizer.fit_transform(X)

print("Splitting dataset...\n")

X_train, X_test, y_train, y_test = train_test_split(X_all, Y2, test_size=0.3, random_state=15)
print("Train: %d - Test: %d \n" %(X_train.shape[0],X_test.shape[0]))


print("Creating LinearSVC model...\n")
lin_svc = svm.LinearSVC().fit(X_train, y_train)
print("Creating LinearSVC created\n")

print("\n++++++++++++ Prediction ++++++++++++\n")
y_pred = lin_svc.predict(X_test)
print("Accurancy: %.3f \n" %(accuracy_score(y_test, y_pred)))
print("Confusion matrix: \n")
print(confusion_matrix(y_test, y_pred))
print("Classification report: \n")
print(classification_report(y_test, y_pred))

print("\n++++++++++++ K-fold cross-validation ++++++++++++\n")
y_pred_k = cross_val_predict(lin_svc, X_all, Y2, cv=5, n_jobs=-1)
score = cross_val_score(lin_svc, X_all, Y2, cv=5, n_jobs=-1)
print("\nCV Accurancy: %.3f (+/- %0.2f)" % (score.mean(), score.std()*2))

print("\n\n")

print("Creating Multinomial Naive Bayes model...\n")
model3 = MultinomialNB().fit(X_train, y_train)
print("Multinomial Naive Bayes model created\n")

print("\n++++++++++++ Prediction ++++++++++++\n")
y_pred3 = model3.predict(X_test)
print("Accuracy: %.3f \n" %(accuracy_score(y_test, y_pred3)))
print("Confusion matrix: \n")
print(confusion_matrix(y_test, y_pred3))
print("Classification report: \n")
print(classification_report(y_test, y_pred3))

print("\n++++++++++++ K-fold cross-validation ++++++++++++\n")
y_pred_k = cross_val_predict(model3, X_all, Y2, cv=5, n_jobs=-1)
score = cross_val_score(model3, X_all, Y2, cv=5, n_jobs=-1)
print("\nCV Accurancy: %.3f (+/- %0.2f)" % (score.mean(), score.std()*2))

print("\n\n")

print("Creating Random Forest model...\n")
model6 = RandomForestClassifier(n_estimators=100, n_jobs=-1).fit(X_train, y_train)
print("Random Forest model created\n")

print("\n++++++++++++ Prediction ++++++++++++\n")
y_pred6 = model6.predict(X_test)
print("Accuracy: %.3f \n" %(accuracy_score(y_test, y_pred6)))
print("Confusion matrix: \n")
print(confusion_matrix(y_test, y_pred6))
print("Classification report: \n")
print(classification_report(y_test, y_pred6))

print("\n++++++++++++ K-fold cross-validation ++++++++++++\n")
y_pred_k = cross_val_predict(model6, X_all, Y2, cv=5, n_jobs=-1)
score = cross_val_score(model6, X_all, Y2, cv=5, n_jobs=-1)
print("\nCV Accurancy: %.3f (+/- %0.2f)" % (score.mean(), score.std()*2))

